## 第一次作业批改总结
----

**
整体完成情况不错，但有个别同学仅是写了程序，并没有在机器上编码、编译、运行和测试自己的程序。
**

----

#### 1. 编写一个C++风格的程序，用动态分配空间的方法计算Fibonacci数列的前20项并存储到动态分配的空间中。

** 完成情况 **

> 这个题目的完成度比较高，部分同学还增加了前20项的求和运算，说明同学们能够认真阅读课本，使用相关知法解决问题，赞一个！

**存在不足**
> 1. 个别同学没有按题目要求完成程序
>> 1. 没有应用动态分配空间，而是直接使用了数组；
>> 1. 没有按要求生成存储空间和存储相应的数值；
>> 1. 部分对指针运算还不是很清晰，如 p-1、p+1 和 p--、p++差异是前者不改变指针变量p的值，而后者会改变；
>> 1. 仅输出前几项的和，项数还没给够，：( 。

> 1. 动态分配空间的用法不是很合适，题目的要求是存储整个数列（前20项）
>> int \*p = new int(21); //只申请了一个整型(int)数据（值是21）的存储空间

> 1. 释放动态分配的存储空间时，无需给出空间中的元素个数
>> delete []p; //p是指针变量，指向动态分配的内存空间

** 知识要点 **

> 动态分配空间, 返回的是空间的首地址（指针），所以当有多个数据时，这些数据是可以按下标序进行访问的，但需要注意下标越界的问题。

> 类型名称 * 变量名称 = new 类型名称[元素个数];

>> 注意：方括号中是一个常数，表示的是需要存储的元素个数，不是内存的字节数

> 示例
>> int * p = new int[20]; //注意是方括号[]

>> /\* 动态分配存储20个整型(int)数据的存储空间，并将空间的首地址（也可认为是第0个整数的地址赋给指针变量p。 \*/

>> for(int i = 0; i < 20; i++) {  //按数组的方式访问

>> &nbsp;&nbsp; p[i] = xxx; //xxx 是要给对应下标元素要赋的值。

>> }

** 示例程序 **
> 基于大部分作业稍做了些调整，也没有求前20项的和
```
#include <iostream>
using namespace std;
int main()
{
  int * p= new int[20];  //动态分配空间
  p[0] = p[1] = 1;  // *p = *(p + 1) = 1; 也可以
  for(int i = 2; i < 20; i++) { // 生成并存储队列
    p[i] = p[i - 1] + p[i - 2]; // *(p + i) = *(p + i - 1) + *(p + i - 2);
  }
  for(int i = 1; i <= 20; i++) { //输出队列的值, 下标从1开始是避免第1次打印会输出一个空行
    cout << p[i - 1] << ",";  // *(p + i - 1)
    if(i % 10) cout << endl;
  }
  delete []p; //释放动态分配的存储空间
  return 0;
}
```

#### 2. 编写一个C++风格的程序，输入两个整数，将它们按由小到大的顺序输出，要求使用变量的引用。
>此题的完成度也很高，多数同学还运用了传引用实现变量值的交换，并应用到程序中，赞！！

> **仅少数同学没有按题目要求使用引用！**

** 修改建议 **

> 1. 代码不够简练
>> 例如：
```
if(a > b) {
    swap(a, b);
    cout << a << " " << b << endl; //语句1
} else {
    cout << a << " " << b << endl; //语句2
}
```
> 语句1和语句2的使用，就不如改为
```
if(a > b) {
    swap(a, b)
}
cout << a << " " << b << endl;
```
> 1. 不直接在函数输出数据
>> 直接在函数里输出（向屏幕打印）数据，本身并没什么不对或错误的地方，
但通常是会把数据的处理结果返回给函数的调用者，由上层函数决定如何打印数据，
目的是为了保证函数的通用性
>> 例如：
```
void sort(int &x, int &y)
{
    if(a > b) {
        cout << b << " " << a << endl;
    } else {
        cout << a << " " << b << endl;
    }
}
```
不如修改为：
```
//将两整数从小到大排序
void sort(int &x, int &y)
{
    if(x < y) return;
    int t;
    t = x;
    x = y;
    y = t;
}
```

** 示例程序 **
> 基于大部分作业稍做了些调整，主要是函数名和函数的实现与调用方式等地方
```
#include <iostream>
using namespace std;
void sort(int &a, int &b);
int main()
{
  int x, y;
  cin >> x >> y;
  sort(x, y);
  cout << x << y;
  return 0;
}
void sort(int &a, int &b)
{
  if(a < b) return;
  int t = a;
  a = b;
  b = t;
}
```
